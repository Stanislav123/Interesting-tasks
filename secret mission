#include <iostream>
#include <vector>
#include <unordered_map>
#include <string>

int longest_balanced(const std::vector<std::string>& sequence) {
    int balance = 0;
    std::unordered_map<int, int> index_by_balance;
    index_by_balance[balance] = -1; //max_index;
    int max_length = 0;

    for (size_t i = 0; i < sequence.size(); ++i) {
        balance += (sequence[i] == "1") ? 1 : -1;
        if (index_by_balance.find(balance) == index_by_balance.end()) {
            index_by_balance[balance] = i;
            continue;
        }
        int length = i - index_by_balance[balance];
        if (length > max_length) {
            max_length = length;
        }
    }
    return max_length;
}

int main() {
    int n;
    std::cin >> n;
    std::vector<std::string> strings(n);
    for (int i = 0; i < n; ++i) {
        std::cin >> strings[i];
    }
    std::cout << longest_balanced(strings) << std::endl;
    return 0;
}
